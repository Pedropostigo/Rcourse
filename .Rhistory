var <- 2
print(var)
char_var <- "hola"
is.character(char_var)
install.packages("pacman")
library("pacman")
p_load(ggplot2, caret)
p_update()
houses_train <- read.csv(file = "data/houses_train.csv", sep = ",", dec = ".")
head(houses_train)
print(paste("Data frame con ", nrow(houses_train), " filas y ", ncol(houses_train), " columnas"))
install.packages("stringi")
var <- 2
print(var)
char_var <- "hola"
is.character(char_var)
install.packages("pacman")
library("pacman")
p_load(ggplot2, caret)
install.packages("pacman")
p_load(caret)
library("pacman")
p_load(caret)
library("pacman")
p_load(caret)
complete.cases(houses_train)
houses_train <- houses_train[complete.cases(houses_train)]
var <- 2
print(var)
char_var <- "hola"
is.character(char_var)
install.packages("pacman")
library("pacman")
p_load(ggplot2, caret)
install.packages("pacman")
var <- 2
print(var)
char_var <- "hola"
is.character(char_var)
install.packages("pacman")
library("pacman")
p_load(ggplot2, caret)
p_update()
houses_train <- read.csv(file = "data/houses_train.csv", sep = ",", dec = ".")
head(houses_train)
print(paste("Data frame con ", nrow(houses_train), " filas y ", ncol(houses_train), " columnas"))
library("pacman")
p_load(caret)
houses_train <- houses_train[complete.cases(houses_train),]
var <- 2
print(var)
char_var <- "hola"
is.character(char_var)
install.packages("pacman")
library("pacman")
p_load(ggplot2, caret)
install.packages("pacman")
install.packages("stringi")
var <- 2
print(var)
char_var <- "hola"
is.character(char_var)
install.packages("pacman")
library("pacman")
p_load(ggplot2, caret)
p_update()
houses_train <- read.csv(file = "data/houses_train.csv", sep = ",", dec = ".")
head(houses_train)
print(paste("Data frame con ", nrow(houses_train), " filas y ", ncol(houses_train), " columnas"))
View(houses_train)
numeric_features <- unlist(lapply(houses_train, is.numeric))
numeric_features <- Filter(is.numeric, houses_train)
numeric_features <- colnames(Filter(is.numeric, houses_train))
numeric_features <- colnames(Filter(is.numeric, houses_train))
for (feat in numeric_features){
houses_train[is.na(houses_train[, feat]), feat] <- mean(houses_train[, feat])
}
categorical_features <- setdiff(colnames(houses_train), numeric_features)
library("pacman")
p_load(caret)
numeric_features <- colnames(Filter(is.numeric, houses_train))
for (feat in numeric_features){
houses_train[is.na(houses_train[, feat]), feat] <- mean(houses_train[, feat])
}
categorical_features <- setdiff(colnames(houses_train), numeric_features)
for (feat in numeric_features){
houses_train[is.na(houses_train[, feat]), feat] <- "NA"
}
houses_train <- houses_train[complete.cases(houses_train),]
var <- 2
print(var)
char_var <- "hola"
is.character(char_var)
install.packages("pacman")
library("pacman")
p_load(ggplot2, caret)
install.packages("pacman")
numeric_features <- colnames(Filter(is.numeric, houses_train))
for (feat in numeric_features){
houses_train[is.na(houses_train[, feat]), feat] <- mean(houses_train[, feat])
}
var <- 2
print(var)
char_var <- "hola"
is.character(char_var)
install.packages("pacman")
library("pacman")
p_load(ggplot2, caret)
p_update()
houses_train <- read.csv(file = "data/houses_train.csv", sep = ",", dec = ".")
head(houses_train)
print(paste("Data frame con ", nrow(houses_train), " filas y ", ncol(houses_train), " columnas"))
numeric_features <- colnames(Filter(is.numeric, houses_train))
for (feat in numeric_features){
houses_train[is.na(houses_train[, feat]), feat] <- mean(houses_train[, feat])
}
categorical_features <- setdiff(colnames(houses_train), numeric_features)
for (feat in categorical_features){
houses_train[is.na(houses_train[, feat]), feat] <- "NA"
}
categorical_features <- setdiff(colnames(houses_train), numeric_features)
for (feat in categorical_features){
# en primer lugar, añadimos el level "NA" a los factores del data frame
houses_train[, feat] <- factor(houses_train[, feat], levels = c(levels(houses_train[, feat]), "NA"))
# en segundo lugar, añadimos el "NA" a los valores que sean missing
houses_train[is.na(houses_train[, feat]), feat] <- "NA"
}
houses_train <- houses_train[complete.cases(houses_train),]
library("pacman")
p_load(caret)
numeric_features <- colnames(Filter(is.numeric, houses_train))
for (feat in numeric_features){
houses_train[is.na(houses_train[, feat]), feat] <- mean(houses_train[, feat])
}
categorical_features <- setdiff(colnames(houses_train), numeric_features)
for (feat in categorical_features){
# en primer lugar, añadimos el level "NA" a los factores del data frame
houses_train[, feat] <- factor(houses_train[, feat], levels = c(levels(houses_train[, feat]), "NA"))
# en segundo lugar, añadimos el "NA" a los valores que sean missing
houses_train[is.na(houses_train[, feat]), feat] <- "NA"
}
categorical_features <- setdiff(colnames(houses_train), numeric_features)
for (feat in categorical_features){
# en primer lugar, añadimos el level "NA" a los factores del data frame
if (!("NA" %in% levels(houses_train[, feat]))){
houses_train[, feat] <- factor(houses_train[, feat], levels = c(levels(houses_train[, feat]), "NA"))
}
# en segundo lugar, añadimos el "NA" a los valores que sean missing
houses_train[is.na(houses_train[, feat]), feat] <- "NA"
}
houses_train <- houses_train[complete.cases(houses_train),]
library("caret", lib.loc="~/R/win-library/3.5")
install.packages("stringi",type="mac.binary")
install.packages("stringi",type="win.binary")
numeric_features <- colnames(Filter(is.numeric, houses_train))
for (feat in numeric_features){
houses_train[is.na(houses_train[, feat]), feat] <- mean(houses_train[, feat])
}
categorical_features <- setdiff(colnames(houses_train), numeric_features)
for (feat in categorical_features){
# en primer lugar, añadimos el level "NA" a los factores del data frame
if (!("NA" %in% levels(houses_train[, feat]))){
houses_train[, feat] <- factor(houses_train[, feat], levels = c(levels(houses_train[, feat]), "NA"))
}
# en segundo lugar, añadimos el "NA" a los valores que sean missing
houses_train[is.na(houses_train[, feat]), feat] <- "NA"
}
houses_train <- houses_train[complete.cases(houses_train),]
library("pacman")
p_load(caret)
inTrain <- createDa
library("caret", lib.loc="~/R/win-library/3.5")
install.packages("bindrcpp")
library("caret", lib.loc="~/R/win-library/3.5")
inTrain <- createDataPartition(houses_train$SalePrice, p = 0.75)
inTrain <- list(createDataPartition(houses_train$SalePrice, p = 0.75))
inTrain <- createDataPartition(houses_train$SalePrice, p = 0.75)
# muestra de train
houses_train[inTrain, ]
# muestra de train
houses_train[[inTrain, ]]
# muestra de train
houses_train[inTrain, ]
inTrain <- createDataPartition(houses_train$SalePrice, p = 0.75, list = F)
# muestra de train
houses_train[inTrain, ]
# muestra de test
houses_train[~inTrain, ]
numeric_features <- colnames(Filter(is.numeric, houses_train))
for (feat in numeric_features){
houses_train[is.na(houses_train[, feat]), feat] <- mean(houses_train[, feat])
}
categorical_features <- setdiff(colnames(houses_train), numeric_features)
for (feat in categorical_features){
# en primer lugar, añadimos el level "NA" a los factores del data frame
if (!("NA" %in% levels(houses_train[, feat]))){
houses_train[, feat] <- factor(houses_train[, feat], levels = c(levels(houses_train[, feat]), "NA"))
}
# en segundo lugar, añadimos el "NA" a los valores que sean missing
houses_train[is.na(houses_train[, feat]), feat] <- "NA"
}
houses_train <- houses_train[complete.cases(houses_train),]
library("pacman")
p_load(caret)
inTrain <- createDataPartition(houses_train$SalePrice, p = 0.75, list = F)
# muestra de train
houses_train[inTrain, ]
# muestra de test
houses_train[~inTrain, ]
?train()
features_prediccion <- setdiff(colnames(houses_train), c("SalePrice"))
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree")
View(houses_train)
features_prediccion <- setdiff(colnames(houses_train), c("SalePrice", "Id"))
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree")
dmy <- dummyVars(" ~ .", data = houses_train)
houses_train <- data.frame(predict(dmy, newdata = houses_train))
features_prediccion <- setdiff(colnames(houses_train), c("SalePrice", "Id"))
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree",
metric = "RMSE")
print(xgb_model)
library(pacman)
p_load(ggplot2)
houses_train <- read.csv("data/houses_train.csv")
ggplot(data = houses_train,
aes(x = GrLivArea,
y = SalePrice)) # Importante: las referencias a los ejes X e Y no se ecriben entre comillas
library(pacman)
p_load(ggplot2)
install.packages("ggplot2")
houses_train <- read.csv("data/houses_train.csv")
ggplot(data = houses_train,
aes(x = GrLivArea,
y = SalePrice)) # Importante: las referencias a los ejes X e Y no se ecriben entre comillas
library("ggplot2", lib.loc="~/R/win-library/3.5")
install.packages("colorspace")
ggplot(data = houses_train,
aes(x = GrLivArea,
y = SalePrice)) # Importante: las referencias a los ejes X e Y no se ecriben entre comillas
library("ggplot2", lib.loc="~/R/win-library/3.5")
ggplot(data = houses_train,
aes(x = GrLivArea,
y = SalePrice)) # Importante: las referencias a los ejes X e Y no se ecriben entre comillas
library(ggplot2)
houses_train <- read.csv("data/houses_train.csv")
ggplot(data = houses_train,
aes(x = GrLivArea,
y = SalePrice)) # Importante: las referencias a los ejes X e Y no se ecriben entre comillas
base_plot <- ggplot(data = houses_train,
aes(x = GrLivArea,
y = SalePrice))
base_plot
scatter_plot <- base_plot + geom_point()
scatter_plot
scatter_plot <- base_plot + geom_point(color = "blue", fill = "lightblue", shape = 21)
scatter_plot
title_plot <- ggtitle("Precio de venta vs. Área",
subtitle = "Relación entre el precio de venta y el área de la vivienda")
x_label <- xlab("Área de la vivienda")
y_label <- ylab("Precio de venta")
scatter_plot <- scatter_plot + title_plot + x_label + y_label
scatter_plot
View(houses_train)
tune_grid <- expand.grid(nrounds = c(250, 500, 1000),
eta = c(0.1, 0.25, 0.5) )
View(tune_grid)
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree",
metric = "RMSE",
trControl = train_control,
tuneGrid = tune_grid) # Aquí es donde pasamos la grid sobre la que vamos a testear los parámetros
houses_train <- read.csv("data/houses_train.csv")
numeric_features <- colnames(Filter(is.numeric, houses_train))
for (feat in numeric_features){
houses_train[is.na(houses_train[, feat]), feat] <- mean(houses_train[, feat])
}
categorical_features <- setdiff(colnames(houses_train), numeric_features)
for (feat in categorical_features){
# en primer lugar, añadimos el level "NA" a los factores del data frame
if (!("NA" %in% levels(houses_train[, feat]))){
houses_train[, feat] <- factor(houses_train[, feat], levels = c(levels(houses_train[, feat]), "NA"))
}
# en segundo lugar, añadimos el "NA" a los valores que sean missing
houses_train[is.na(houses_train[, feat]), feat] <- "NA"
}
library(caret)
dmy <- dummyVars(" ~ .", data = houses_train)
houses_train <- data.frame(predict(dmy, newdata = houses_train))
houses_train <- houses_train[complete.cases(houses_train),]
inTrain <- createDataPartition(houses_train$SalePrice, p = 0.75, list = F)
# muestra de train
houses_train[inTrain, ]
# muestra de test
houses_train[-inTrain, ]
# seleccionamos los features con los que se va ha hacer predicciones: todos menos Id y SalePrice (este es el target que queremos predecir)
features_prediccion <- setdiff(colnames(houses_train), c("SalePrice", "Id"))
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree",
metric = "RMSE")
val_prediction <- predict(xgb_model,
newdata = houses_train[-inTrain, features_prediccion])
library(Metrics)
error <- rmse(actual = houses_train[-inTrain, "SalePrice"],
predicted = val_prediction)
print(error)
print(xgb_model)
train_control <- trainControl(method = "cv",
number = 5)
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree",
metric = "RMSE",
trControl = train_control) # Aquí es donde pasamos nuestra variable train_control para cambiar como
# se realiza el resampling
print(xgb_model)
tune_grid <- expand.grid(nrounds = c(250, 500, 1000),
eta = c(0.1, 0.25, 0.5) )
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree",
metric = "RMSE",
trControl = train_control,
tuneGrid = tune_grid) # Aquí es donde pasamos la grid sobre la que vamos a testear los parámetros
tune_grid <- expand.grid(nrounds = c(250, 500, 1000),
max_depth = 2,
eta = c(0.1, 0.25, 0.5),
gamma = 0,
colsample_bytree = 0.6,
min_child_weight = 1,
subsample = 1)
View(tune_grid)
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree",
metric = "RMSE",
trControl = train_control,
tuneGrid = tune_grid) # Aquí es donde pasamos la grid sobre la que vamos a testear los parámetros
print(xgb_model)
val_prediction <- predict(xgb_model,
newdata = houses_train[-inTrain, features_prediccion])
error <- rmse(actual = houses_train[-inTrain, "SalePrice"],
predicted = val_prediction)
print(error)
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree",
metric = "RMSE",
trControl = train_control,
tuneGrid = tune_grid) # Aquí es donde pasamos la grid sobre la que vamos a testear los parámetros
print(xgb_model)
houses_train <- read.csv("data/houses_train.csv")
set.seed(1234)
numeric_features <- colnames(Filter(is.numeric, houses_train))
for (feat in numeric_features){
houses_train[is.na(houses_train[, feat]), feat] <- mean(houses_train[, feat])
}
categorical_features <- setdiff(colnames(houses_train), numeric_features)
for (feat in categorical_features){
# en primer lugar, añadimos el level "NA" a los factores del data frame
if (!("NA" %in% levels(houses_train[, feat]))){
houses_train[, feat] <- factor(houses_train[, feat], levels = c(levels(houses_train[, feat]), "NA"))
}
# en segundo lugar, añadimos el "NA" a los valores que sean missing
houses_train[is.na(houses_train[, feat]), feat] <- "NA"
}
library(caret)
dmy <- dummyVars(" ~ .", data = houses_train)
houses_train <- data.frame(predict(dmy, newdata = houses_train))
houses_train <- houses_train[complete.cases(houses_train),]
inTrain <- createDataPartition(houses_train$SalePrice, p = 0.75, list = F)
# muestra de train
houses_train[inTrain, ]
# muestra de test
houses_train[-inTrain, ]
# seleccionamos los features con los que se va ha hacer predicciones: todos menos Id y SalePrice (este es el target que queremos predecir)
features_prediccion <- setdiff(colnames(houses_train), c("SalePrice", "Id"))
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree",
metric = "RMSE")
val_prediction <- predict(xgb_model,
newdata = houses_train[-inTrain, features_prediccion])
library(Metrics)
error <- rmse(actual = houses_train[-inTrain, "SalePrice"],
predicted = val_prediction)
print(error)
print(xgb_model)
train_control <- trainControl(method = "cv",
number = 5)
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree",
metric = "RMSE",
trControl = train_control) # Aquí es donde pasamos nuestra variable train_control para cambiar como
# se realiza el resampling
print(xgb_model)
tune_grid <- expand.grid(nrounds = c(250, 500, 1000),
max_depth = 2,
eta = c(0.1, 0.25, 0.5),
gamma = 0,
colsample_bytree = 0.6,
min_child_weight = 1,
subsample = 1)
xgb_model <- train(x = houses_train[inTrain, features_prediccion],
y = houses_train[inTrain, "SalePrice"],
method = "xgbTree",
metric = "RMSE",
trControl = train_control,
tuneGrid = tune_grid) # Aquí es donde pasamos la grid sobre la que vamos a testear los parámetros
print(xgb_model)
val_prediction <- predict(xgb_model,
newdata = houses_train[-inTrain, features_prediccion])
error <- rmse(actual = houses_train[-inTrain, "SalePrice"],
predicted = val_prediction)
print(error)
library(ggplot2)
houses_train <- read.csv("data/houses_train.csv")
ggplot(data = houses_train,
aes(x = GrLivArea,
y = SalePrice)) # Importante: las referencias a los ejes X e Y no se ecriben entre comillas
base_plot <- ggplot(data = houses_train,
aes(x = GrLivArea,
y = SalePrice))
base_plot
scatter_plot <- base_plot + geom_point()
scatter_plot
scatter_plot <- base_plot + geom_point(color = "blue", fill = "lightblue", shape = 21)
scatter_plot
title_plot <- ggtitle("Precio de venta vs. Área",
subtitle = "Relación entre el precio de venta y el área de la vivienda")
x_label <- xlab("Área de la vivienda")
y_label <- ylab("Precio de venta")
scatter_plot <- scatter_plot + title_plot + x_label + y_label
scatter_plot
number <- 6
if (number %% 2 == 0){
print(paste("El número ", number, " es divisible entre 2"))
} else if (number %% 3 == 0){
print(paste("El número ", number, " es divisible entre 3 y no es divisible entre 2"))
}  else {
print(paste("El número ", number, " no es divisible entre 2 ni entre 3"))
}
number <- 3
if (number %% 2 == 0){
print(paste("El número ", number, " es divisible entre 2"))
} else if (number %% 3 == 0){
print(paste("El número ", number, " es divisible entre 3 y no es divisible entre 2"))
}  else {
print(paste("El número ", number, " no es divisible entre 2 ni entre 3"))
}
number <- 7
if (number %% 2 == 0){
print(paste("El número ", number, " es divisible entre 2"))
} else if (number %% 3 == 0){
print(paste("El número ", number, " es divisible entre 3 y no es divisible entre 2"))
}  else {
print(paste("El número ", number, " no es divisible entre 2 ni entre 3"))
}
var <- 2
print(var)
char_var <- "hola"
is.character(char_var)
number <- 6
if (number %% 2 == 0){
print(paste("El número ", number, " es divisible entre 2"))
} else if (number %% 3 == 0){
print(paste("El número ", number, " es divisible entre 3 y no es divisible entre 2"))
}  else {
print(paste("El número ", number, " no es divisible entre 2 ni entre 3"))
}
install.packages("pacman")
library("pacman")
p_load(ggplot2, caret)
p_update()
houses_train <- read.csv(file = "data/houses_train.csv", sep = ",", dec = ".")
head(houses_train)
print(paste("Data frame con ", nrow(houses_train), " filas y ", ncol(houses_train), " columnas"))
valores <- seq(1, 10)
for(indice in valores){
print(indice)
}
valores <- c("A", "E", "I", "O", "U")
for(indice in valores){
print(indice)
}
install.packages("stringi")
install.packages("dplyr")
install.packages("purrr")
?runif()
var <- 1
while(var < 10){
var <- runif(1, 1, 10)
print(var)
}
var <- 1
while(var < 10){
var <- ceiling(runif(1, 0, 10))
print(var)
}
var <- 1
while(var < 10){
var <- ceiling(runif(1, 0, 10))
print(var)
}
